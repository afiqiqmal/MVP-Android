import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.regex.Matcher
import java.util.regex.Pattern


apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
//apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.jakewharton.butterknife'
apply from : 'dependencies.gradle'
apply from : 'signing.gradle'

def getDateTime() {
    DateFormat df = new SimpleDateFormat("yyyyMMdd");
    return df.format(new Date());
}

def getApi() {
    if (getCurrentFlavor() == "prod") {
        if(getCurrentBuildType() == "release"){
            return PROD_API
        }
        else{
            return DEBUG_API
        }
    }
    else if(getCurrentFlavor() == "mock"){
        if(getCurrentBuildType() == "release"){
            return PROD_API
        }
        else{
            return DEBUG_API
        }
    }
    else
        return "NULL";
}


def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern;

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() )
        return matcher.group(1).toLowerCase()
    else
    {
        println "NO MATCH FOUND"
        return "";
    }
}

def getCurrentBuildType() {
    Gradle gradle = getGradle()
    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    if (tskReqStr.contains("Release")) {
        println "getCurrentBuildType release"
        return "release"
    }
    else if (tskReqStr.contains("generateDebug")) {
        println "getCurrentBuildType debug"
        return "debug"
    }

    println "NO MATCH FOUND"
    return "";
}

def getEncryptKey(String str){

    byte[] aa = Base64.getEncoder().encode(str.getBytes("utf-8"))
    byte[] bb = Base64.getEncoder().encode(aa)
    byte[] cc = Base64.getEncoder().encode(bb)
    byte[] dd = Base64.getEncoder().encode(cc)

    return "\""+new String(dd)+"\"";
}

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

def sumVersionCode = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100;

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    defaultConfig {
        applicationId "com.java.mvp.mvpandroid"

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode sumVersionCode
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    buildTypes {

        debug {
            testCoverageEnabled true
            versionNameSuffix "-staging"
            minifyEnabled false
            buildConfigField 'String','URL_API',getEncryptKey(getApi())
        }

        release {
            zipAlignEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField 'String','URL_API',getEncryptKey(getApi())
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def finalName = "mvp-" + variant.versionName + "-" + variant.productFlavors[0].name + "-" + variant.buildType.name + "-" + getDateTime() + ".apk";
                output.outputFile = new File(output.outputFile.parent, finalName)
            }
        }

        android.variantFilter { variant ->
            if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'mock') {
                variant.setIgnore(true);
            }
        }
    }

    productFlavors {
        mock {
            applicationId rootProject.packageNameMock
        }
        prod {
            applicationId rootProject.packageName
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

configurations.all {
    resolutionStrategy {
        force libraries.supportAnnotations
    }
}

apply plugin: 'com.google.gms.google-services'
